# -*- coding: utf-8 -*-
"""PROJECT_19L-1411-19L-1384.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Yp-huttuwMVoQCG7VM9ktE2JiRfq_85o
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn import preprocessing, svm
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression



df = pd.read_csv('MA.csv')

df=df.drop(["ID"],axis=1)
df.info()

print(df.isnull().sum())

df['PT']=df['PT'].replace(np.nan,df['PT'].mean())
df['Lymphocyte']=df['Lymphocyte'].replace(np.nan,df['Lymphocyte'].mean())
df['Basophils']=df['Basophils'].replace(np.nan,df['Basophils'].mean())
df['Neutrophils']=df['Neutrophils'].replace(np.nan,df['Neutrophils'].mean())
df['Urine output']=df['Urine output'].replace(np.nan,df['Urine output'].mean())
df['Systolic blood pressure']=df['Systolic blood pressure'].replace(np.nan,df['Systolic blood pressure'].mean())
df['Diastolic blood pressure']=df['Diastolic blood pressure'].replace(np.nan,df['Diastolic blood pressure'].mean())
df['heart rate']=df['heart rate'].replace(np.nan,df['heart rate'].mean())
df['BMI']=df['BMI'].replace(np.nan,df['BMI'].mean())
df['Blood calcium']=df['Blood calcium'].replace(np.nan,df['Blood calcium'].mean())
print(df.isnull().sum())

duplicateRows = df[df.duplicated()]
duplicateRows
#No duplicate rows.

for i in df:
 print(df[i].unique())

sns.boxplot(x=df['BMI'])

Q1 = df["BMI"].quantile(0.25)
Q3 = df["BMI"].quantile(0.75)
IQR = Q3 - Q1
lower = Q1 - (1.5 * IQR)
upper = Q3 + (1.5 * IQR)
df["BMI"]=np.where(df["BMI"]> upper, upper, np.where(df["BMI"]<lower, lower, df["BMI"]))
sns.boxplot(x=df['BMI'])

sns.boxplot(x=df['Systolic blood pressure'])

Q1 = df["Systolic blood pressure"].quantile(0.25)
Q3 = df["Systolic blood pressure"].quantile(0.75)
IQR = Q3 - Q1
lower = Q1 - (1.5 * IQR)
upper = Q3 + (1.5 * IQR)
df["Systolic blood pressure"]=np.where(df["Systolic blood pressure"]> upper, upper, np.where(df["Systolic blood pressure"]<lower, lower, df["Systolic blood pressure"]))
sns.boxplot(x=df['Systolic blood pressure'])

sns.boxplot(x=df['Magnesium ion'])

Q1 = df["Magnesium ion"].quantile(0.25)
Q3 = df["Magnesium ion"].quantile(0.75)
IQR = Q3 - Q1
lower = Q1 - (1.5 * IQR)
upper = Q3 + (1.5 * IQR)
df["Magnesium ion"]=np.where(df["Magnesium ion"]> upper, upper, np.where(df["Magnesium ion"]<lower, lower, df["Magnesium ion"]))
sns.boxplot(x=df['Magnesium ion'])

sns.boxplot(x=df['Chloride'])

Q1 = df["Chloride"].quantile(0.25)
Q3 = df["Chloride"].quantile(0.75)
IQR = Q3 - Q1
lower = Q1 - (1.5 * IQR)
upper = Q3 + (1.5 * IQR)
df["Chloride"]=np.where(df["Chloride"]> upper, upper, np.where(df["Chloride"]<lower, lower, df["Chloride"]))
sns.boxplot(x=df['Chloride'])

sns.boxplot(x=df['Blood calcium'])

Q1 = df["Blood calcium"].quantile(0.25)
Q3 = df["Blood calcium"].quantile(0.75)
IQR = Q3 - Q1
lower = Q1 - (1.5 * IQR)
upper = Q3 + (1.5 * IQR)
df["Blood calcium"]=np.where(df["Blood calcium"]> upper, upper, np.where(df["Blood calcium"]<lower, lower, df["Blood calcium"]))
sns.boxplot(x=df['Blood calcium'])

sns.boxplot(x=df['Blood sodium'])

Q1 = df["Blood sodium"].quantile(0.25)
Q3 = df["Blood sodium"].quantile(0.75)
IQR = Q3 - Q1
lower = Q1 - (1.5 * IQR)
upper = Q3 + (1.5 * IQR)
df["Blood sodium"]=np.where(df["Blood sodium"]> upper, upper, np.where(df["Blood sodium"]<lower, lower, df["Blood sodium"]))
sns.boxplot(x=df['Blood sodium'])

sns.boxplot(x=df['Blood potassium'])

Q1 = df["Blood potassium"].quantile(0.25)
Q3 = df["Blood potassium"].quantile(0.75)
IQR = Q3 - Q1
lower = Q1 - (1.5 * IQR)
upper = Q3 + (1.5 * IQR)
df["Blood potassium"]=np.where(df["Blood potassium"]> upper, upper, np.where(df["Blood potassium"]<lower, lower, df["Blood potassium"]))
sns.boxplot(x=df['Blood potassium'])

sns.boxplot(x=df['Urea nitrogen'])

Q1 = df["Urea nitrogen"].quantile(0.25)
Q3 = df["Urea nitrogen"].quantile(0.75)
IQR = Q3 - Q1
lower = Q1 - (1.5 * IQR)
upper = Q3 + (1.5 * IQR)
df["Urea nitrogen"]=np.where(df["Urea nitrogen"]> upper, upper, np.where(df["Urea nitrogen"]<lower, lower, df["Urea nitrogen"]))
sns.boxplot(x=df['Urea nitrogen'])

sns.boxplot(x=df['PT'])

Q1 = df["PT"].quantile(0.25)
Q3 = df["PT"].quantile(0.75)
IQR = Q3 - Q1
lower = Q1 - (1.5 * IQR)
upper = Q3 + (1.5 * IQR)
df["PT"]=np.where(df["PT"]> upper, upper, np.where(df["PT"]<lower, lower, df["PT"]))
sns.boxplot(x=df['PT'])

sns.boxplot(x=df['Lymphocyte'])

Q1 = df["Lymphocyte"].quantile(0.25)
Q3 = df["Lymphocyte"].quantile(0.75)
IQR = Q3 - Q1
lower = Q1 - (1.5 * IQR)
upper = Q3 + (1.5 * IQR)
df["Lymphocyte"]=np.where(df["Lymphocyte"]> upper, upper, np.where(df["Lymphocyte"]<lower, lower, df["Lymphocyte"]))
sns.boxplot(x=df['Lymphocyte'])



sns.boxplot(x=df['Basophils'])

Q1 = df["Basophils"].quantile(0.25)
Q3 = df["Basophils"].quantile(0.75)
IQR = Q3 - Q1
lower = Q1 - (1.5 * IQR)
upper = Q3 + (1.5 * IQR)
df["Basophils"]=np.where(df["Basophils"]> upper, upper, np.where(df["Basophils"]<lower, lower, df["Basophils"]))
sns.boxplot(x=df['Basophils'])

sns.boxplot(x=df['Neutrophils'])

Q1 = df["Neutrophils"].quantile(0.25)
Q3 = df["Neutrophils"].quantile(0.75)
IQR = Q3 - Q1
lower = Q1 - (1.5 * IQR)
upper = Q3 + (1.5 * IQR)
df["Neutrophils"]=np.where(df["Neutrophils"]> upper, upper, np.where(df["Neutrophils"]<lower, lower, df["Neutrophils"]))
sns.boxplot(x=df['Neutrophils'])

sns.boxplot(x=df['Platelets'])

Q1 = df["Platelets"].quantile(0.25)
Q3 = df["Platelets"].quantile(0.75)
IQR = Q3 - Q1
lower = Q1 - (1.5 * IQR)
upper = Q3 + (1.5 * IQR)
df["Platelets"]=np.where(df["Platelets"]> upper, upper, np.where(df["Platelets"]<lower, lower, df["Platelets"]))
sns.boxplot(x=df['Platelets'])

sns.boxplot(x=df['Leucocyte'])

Q1 = df["Leucocyte"].quantile(0.25)
Q3 = df["Leucocyte"].quantile(0.75)
IQR = Q3 - Q1
lower = Q1 - (1.5 * IQR)
upper = Q3 + (1.5 * IQR)
df["Leucocyte"]=np.where(df["Leucocyte"]> upper, upper, np.where(df["Leucocyte"]<lower, lower, df["Leucocyte"]))
sns.boxplot(x=df['Leucocyte'])

sns.boxplot(x=df['RBC'])

Q1 = df["RBC"].quantile(0.25)
Q3 = df["RBC"].quantile(0.75)
IQR = Q3 - Q1
lower = Q1 - (1.5 * IQR)
upper = Q3 + (1.5 * IQR)
df["RBC"]=np.where(df["RBC"]> upper, upper, np.where(df["RBC"]<lower, lower, df["RBC"]))
sns.boxplot(x=df['RBC'])

sns.boxplot(x=df['hematocrit'])

Q1 = df["hematocrit"].quantile(0.25)
Q3 = df["hematocrit"].quantile(0.75)
IQR = Q3 - Q1
lower = Q1 - (1.5 * IQR)
upper = Q3 + (1.5 * IQR)
df["hematocrit"]=np.where(df["hematocrit"]> upper, upper, np.where(df["hematocrit"]<lower, lower, df["hematocrit"]))
sns.boxplot(x=df['hematocrit'])

sns.boxplot(x=df['Urine output'])

Q1 = df["Urine output"].quantile(0.25)
Q3 = df["Urine output"].quantile(0.75)
IQR = Q3 - Q1
lower = Q1 - (1.5 * IQR)
upper = Q3 + (1.5 * IQR)
df["Urine output"]=np.where(df["Urine output"]> upper, upper, np.where(df["Urine output"]<lower, lower, df["Urine output"]))
sns.boxplot(x=df['Urine output'])

sns.boxplot(x=df['Diastolic blood pressure'])

Q1 = df["Diastolic blood pressure"].quantile(0.25)
Q3 = df["Diastolic blood pressure"].quantile(0.75)
IQR = Q3 - Q1
lower = Q1 - (1.5 * IQR)
upper = Q3 + (1.5 * IQR)
df["Diastolic blood pressure"]=np.where(df["Diastolic blood pressure"]> upper, upper, np.where(df["Diastolic blood pressure"]<lower, lower, df["Diastolic blood pressure"]))
sns.boxplot(x=df['Diastolic blood pressure'])

sns.boxplot(x=df['Systolic blood pressure'])



sns.boxplot(x=df['heart rate'])

Q1 = df["heart rate"].quantile(0.25)
Q3 = df["heart rate"].quantile(0.75)
IQR = Q3 - Q1
lower = Q1 - (1.5 * IQR)
upper = Q3 + (1.5 * IQR)
df["heart rate"]=np.where(df["heart rate"]> upper, upper, np.where(df["heart rate"]<lower, lower, df["heart rate"]))
sns.boxplot(x=df['heart rate'])

sns.boxplot(x=df['COPD'])

sns.boxplot(x=df['Hyperlipemia'],width=0.3)

sns.boxplot(x=df['CHD with no MI'])

sns.boxplot(x=df['atrialfibrillation'])

sns.boxplot(x=df['hypertensive'])

sns.boxplot(x=df['gender'],width=0.3)

sns.boxplot(x=df['age'])

Q1 = df["age"].quantile(0.25)
Q3 = df["age"].quantile(0.75)
IQR = Q3 - Q1
lower = Q1 - (1.5 * IQR)
upper = Q3 + (1.5 * IQR)
df["age"]=np.where(df["age"]> upper, upper, np.where(df["age"]<lower, lower, df["age"]))
sns.boxplot(x=df['age'])



from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
df1 = scaler.fit_transform(df)
print(df1)

sns.lineplot(x='outcome', y='Systolic blood pressure', data=df)

 #11  Diastolic blood pressure  813 non-null    float64
 #12  Urine output              800 non-null    float64
 #13  hematocrit

sns.lineplot(x='outcome', y='Urine output', data=df)

sns.lineplot(x='outcome', y='hematocrit', data=df)

sns.lineplot(x='outcome', y='Lymphocyte', data=df)

sns.barplot(y='BMI',x='outcome',data=df,hue="gender")

sns.barplot(y='heart rate',x='outcome',data=df,hue="gender")

sns.barplot(y='Platelets',x='outcome',data=df,hue="gender")

sns.scatterplot(x='outcome',y='Neutrophils',data=df,hue="gender")

import seaborn as sns
import matplotlib.pyplot as plt
fig, ax = plt.subplots(figsize=(40,20))
sns.heatmap(df.corr(), annot=True, linewidths=.5, ax=ax)
plt.show()

from sklearn.feature_selection import mutual_info_classif
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.feature_selection import mutual_info_classif as MIC
from sklearn.feature_selection import SelectKBest, SelectPercentile, mutual_info_classif

X = df.drop(['outcome'], axis=1)
y = df['outcome']

X.shape, y.shape

import joblib
from sklearn.metrics import accuracy_score as acc
!pip install --upgrade mlxtend

from mlxtend.feature_selection import SequentialFeatureSelector as sfs
from sklearn.linear_model import LinearRegression

lreg = LinearRegression()
sfs1 = sfs(lreg, k_features=12, forward=True, verbose=2, scoring='neg_mean_squared_error')

sfs1 = sfs1.fit(X, y)

feat_names = list(sfs1.k_feature_names_)
print(feat_names)

x = df['outcome']
d = df
d = d[['age', 'hypertensive', 'COPD', 'heart rate', 'Urine output', 'hematocrit', 'Leucocyte', 'Platelets', 'Lymphocyte', 'Urea nitrogen', 'Blood calcium', 'Chloride']]
y = d.iloc[:,11].values

x.head()

feature_cols = ['age',
'hypertensive',
'COPD',
'heart rate',
'Urine output',
'hematocrit',
'Leucocyte',
'Platelets',
'Lymphocyte',
'Urea nitrogen',
'Blood calcium',
'Chloride']
X = df[feature_cols]
y = df.outcome

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=16)

from sklearn.linear_model import LogisticRegression
log= LogisticRegression(random_state=16)
log.fit(X_train, y_train)
y_pred = log.predict(X_test)
print(log.score(X_test, y_test))

from sklearn import metrics
cmatrix = metrics.confusion_matrix(y_test, y_pred)
cmatrix

sns.heatmap(pd.DataFrame(cmatrix), annot=True, cmap="YlGnBu" ,fmt='g')
ax.xaxis.set_label_position("top")
plt.tight_layout()
plt.title('Confusion matrix', y=1.1)
plt.ylabel('Actual label')
plt.xlabel('Predicted label')

from sklearn.metrics import classification_report
target_names = ['detected', 'not detected']
print(classification_report(y_test, y_pred, target_names=target_names))

"""INFORMATION GAIN
**bold text**
"""

def entropy(x):
    probs = []
    for c in set(x):
        num_same_class = sum(x == c)
        p = num_same_class / len(x)
        probs.append(p)
    return np.sum(-p * np.log2(p) for p in probs)


print("Entire set entropy = %.2f" % entropy(x))

def class_probability(feature, y):
    probs = []
    for value in set(feature):
        select = feature == value
        y_new = y[select]
        probs.append(float(len(y_new))/len(X))
    return probs

def class_entropy(feature, y):
    ents = []
    for value in set(feature):
        select = feature == value
        y_new = y[select]
        ents.append(entropy(y_new))
    return ents

def proportionate_class_entropy(feature, y):
    probs = class_probability(feature, y)
    ents = class_entropy(feature, y)
    return np.sum(np.multiply(probs, ents))
for z in X:

  new_entropy = proportionate_class_entropy(X[z], y)
  print("Information gain of %.2f" % (entropy(y) - new_entropy))

!pip3 install mlxtend

pip install joblib

pip install sklearn --upgrade